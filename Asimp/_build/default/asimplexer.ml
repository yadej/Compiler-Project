# 1 "asimplexer.mll"
 

  open Lexing
  open Asimpparser

    let keyword_or_ident =
    let h = Hashtbl.create 17 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [ "putchar",  PUTCHAR;
        "if",       IF;
        "else",     ELSE;
        "while",    WHILE;
        "true",     BOOL true;
        "false",    BOOL false;
        "var",      VAR;
        "function", FUNCTION;
        "struct",   STRUCT;
        "new",      NEW;
        "return",   RETURN;
        "int",      TYP_INT;
        "bool",     TYP_BOOL;
        "void",     TYP_VOID;
      ] ;
    fun s ->
      try  Hashtbl.find h s
      with Not_found -> IDENT(s)
        

# 31 "asimplexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\235\255\236\255\237\255\238\255\239\255\240\255\241\255\
    \242\255\243\255\244\255\245\255\246\255\247\255\248\255\249\255\
    \078\000\014\000\024\000\040\000\002\000\255\255\252\255\002\000\
    \253\255\016\000\253\255\254\255\036\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \005\000\004\000\019\000\019\000\001\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\001\000\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\023\000\
    \000\000\027\000\000\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\020\000\021\000\020\000\024\000\020\000\000\000\020\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \020\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\
    \010\000\009\000\012\000\013\000\003\000\018\000\004\000\019\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\028\000\015\000\011\000\014\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\022\000\029\000\000\000\000\000\000\000\023\000\
    \000\000\000\000\000\000\006\000\000\000\005\000\000\000\016\000\
    \000\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\008\000\000\000\007\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\000\000\000\000\000\000\000\000\016\000\000\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\020\000\023\000\000\000\255\255\020\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\020\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\025\000\000\000\000\000\000\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\019\000\028\000\255\255\255\255\255\255\019\000\
    \255\255\255\255\255\255\000\000\255\255\000\000\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\255\255\255\255\255\255\255\255\016\000\255\255\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\023\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \025\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 37 "asimplexer.mll"
      ( new_line lexbuf; token lexbuf )
# 155 "asimplexer.ml"

  | 1 ->
# 39 "asimplexer.mll"
      ( token lexbuf )
# 160 "asimplexer.ml"

  | 2 ->
# 41 "asimplexer.mll"
      ( new_line lexbuf; token lexbuf )
# 165 "asimplexer.ml"

  | 3 ->
# 43 "asimplexer.mll"
      ( comment lexbuf; token lexbuf )
# 170 "asimplexer.ml"

  | 4 ->
let
# 44 "asimplexer.mll"
              n
# 176 "asimplexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 45 "asimplexer.mll"
      ( CST(int_of_string n) )
# 180 "asimplexer.ml"

  | 5 ->
let
# 46 "asimplexer.mll"
             id
# 186 "asimplexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 47 "asimplexer.mll"
      ( keyword_or_ident id )
# 190 "asimplexer.ml"

  | 6 ->
# 49 "asimplexer.mll"
      ( SEMI )
# 195 "asimplexer.ml"

  | 7 ->
# 51 "asimplexer.mll"
      ( SET )
# 200 "asimplexer.ml"

  | 8 ->
# 53 "asimplexer.mll"
      ( PLUS )
# 205 "asimplexer.ml"

  | 9 ->
# 55 "asimplexer.mll"
      ( STAR )
# 210 "asimplexer.ml"

  | 10 ->
# 57 "asimplexer.mll"
      ( LT )
# 215 "asimplexer.ml"

  | 11 ->
# 59 "asimplexer.mll"
      ( LPAR )
# 220 "asimplexer.ml"

  | 12 ->
# 61 "asimplexer.mll"
      ( RPAR )
# 225 "asimplexer.ml"

  | 13 ->
# 63 "asimplexer.mll"
      ( BEGIN )
# 230 "asimplexer.ml"

  | 14 ->
# 65 "asimplexer.mll"
      ( END )
# 235 "asimplexer.ml"

  | 15 ->
# 67 "asimplexer.mll"
      ( LBRACKET )
# 240 "asimplexer.ml"

  | 16 ->
# 69 "asimplexer.mll"
      ( RBRACKET )
# 245 "asimplexer.ml"

  | 17 ->
# 71 "asimplexer.mll"
      ( DOT )
# 250 "asimplexer.ml"

  | 18 ->
# 73 "asimplexer.mll"
      ( COMMA )
# 255 "asimplexer.ml"

  | 19 ->
# 75 "asimplexer.mll"
      ( failwith ("Unknown character : " ^ (lexeme lexbuf)) )
# 260 "asimplexer.ml"

  | 20 ->
# 77 "asimplexer.mll"
      ( EOF )
# 265 "asimplexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 25
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 81 "asimplexer.mll"
      ( () )
# 277 "asimplexer.ml"

  | 1 ->
# 83 "asimplexer.mll"
      ( comment lexbuf )
# 282 "asimplexer.ml"

  | 2 ->
# 85 "asimplexer.mll"
      ( failwith "unfinished comment" )
# 287 "asimplexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

