State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On error shift to state 1
-- On VAR shift to state 2
-- On FUNCTION shift to state 14
-- On CLASS shift to state 108
-- On variable_decl shift to state 126
-- On program shift to state 127
-- On list(decl) shift to state 128
-- On function_def shift to state 130
-- On decl shift to state 131
-- On class_def shift to state 133
## Reductions:
-- On EOF
--   reduce production list(decl) ->

State 1:
## Known stack suffix:
## error
## LR(1) items:
program -> error . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> error

State 2:
## Known stack suffix:
## VAR
## LR(1) items:
variable_decl -> VAR . typed_ident SEMI [ WHILE VAR THIS RETURN PUTCHAR NEW LPAR IF IDENT FUNCTION EOF END CST CLASS BOOL ]
## Transitions:
-- On TYP_VOID shift to state 3
-- On TYP_INT shift to state 4
-- On TYP_BOOL shift to state 5
-- On LBRACKET shift to state 6
-- On IDENT shift to state 7
-- On typed_ident shift to state 10
-- On typ shift to state 12
## Reductions:

State 3:
## Known stack suffix:
## TYP_VOID
## LR(1) items:
typ -> TYP_VOID . [ RBRACKET IDENT COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET IDENT COMMA
--   reduce production typ -> TYP_VOID

State 4:
## Known stack suffix:
## TYP_INT
## LR(1) items:
typ -> TYP_INT . [ RBRACKET IDENT COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET IDENT COMMA
--   reduce production typ -> TYP_INT

State 5:
## Known stack suffix:
## TYP_BOOL
## LR(1) items:
typ -> TYP_BOOL . [ RBRACKET IDENT COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET IDENT COMMA
--   reduce production typ -> TYP_BOOL

State 6:
## Known stack suffix:
## LBRACKET
## LR(1) items:
typ -> LBRACKET . typ RBRACKET [ RBRACKET IDENT COMMA ]
## Transitions:
-- On TYP_VOID shift to state 3
-- On TYP_INT shift to state 4
-- On TYP_BOOL shift to state 5
-- On LBRACKET shift to state 6
-- On IDENT shift to state 7
-- On typ shift to state 8
## Reductions:

State 7:
## Known stack suffix:
## IDENT
## LR(1) items:
typ -> IDENT . [ RBRACKET IDENT COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET IDENT COMMA
--   reduce production typ -> IDENT

State 8:
## Known stack suffix:
## LBRACKET typ
## LR(1) items:
typ -> LBRACKET typ . RBRACKET [ RBRACKET IDENT COMMA ]
## Transitions:
-- On RBRACKET shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## LBRACKET typ RBRACKET
## LR(1) items:
typ -> LBRACKET typ RBRACKET . [ RBRACKET IDENT COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET IDENT COMMA
--   reduce production typ -> LBRACKET typ RBRACKET

State 10:
## Known stack suffix:
## VAR typed_ident
## LR(1) items:
variable_decl -> VAR typed_ident . SEMI [ WHILE VAR THIS RETURN PUTCHAR NEW LPAR IF IDENT FUNCTION EOF END CST CLASS BOOL ]
## Transitions:
-- On SEMI shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## VAR typed_ident SEMI
## LR(1) items:
variable_decl -> VAR typed_ident SEMI . [ WHILE VAR THIS RETURN PUTCHAR NEW LPAR IF IDENT FUNCTION EOF END CST CLASS BOOL ]
## Transitions:
## Reductions:
-- On WHILE VAR THIS RETURN PUTCHAR NEW LPAR IF IDENT FUNCTION EOF END CST CLASS BOOL
--   reduce production variable_decl -> VAR typed_ident SEMI

State 12:
## Known stack suffix:
## typ
## LR(1) items:
typed_ident -> typ . IDENT [ SEMI RPAR COMMA ]
## Transitions:
-- On IDENT shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## typ IDENT
## LR(1) items:
typed_ident -> typ IDENT . [ SEMI RPAR COMMA ]
## Transitions:
## Reductions:
-- On SEMI RPAR COMMA
--   reduce production typed_ident -> typ IDENT

State 14:
## Known stack suffix:
## FUNCTION
## LR(1) items:
function_def -> FUNCTION . fun_def [ VAR FUNCTION EOF CLASS ]
## Transitions:
-- On TYP_VOID shift to state 3
-- On TYP_INT shift to state 4
-- On TYP_BOOL shift to state 5
-- On LBRACKET shift to state 6
-- On IDENT shift to state 7
-- On typ shift to state 15
-- On fun_def shift to state 107
## Reductions:

State 15:
## Known stack suffix:
## typ
## LR(1) items:
fun_def -> typ . IDENT LPAR loption(separated_nonempty_list(COMMA,typed_ident)) RPAR BEGIN list(variable_decl) list(instruction) END [ VAR METHOD FUNCTION EOF END CLASS ]
## Transitions:
-- On IDENT shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## typ IDENT
## LR(1) items:
fun_def -> typ IDENT . LPAR loption(separated_nonempty_list(COMMA,typed_ident)) RPAR BEGIN list(variable_decl) list(instruction) END [ VAR METHOD FUNCTION EOF END CLASS ]
## Transitions:
-- On LPAR shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## typ IDENT LPAR
## LR(1) items:
fun_def -> typ IDENT LPAR . loption(separated_nonempty_list(COMMA,typed_ident)) RPAR BEGIN list(variable_decl) list(instruction) END [ VAR METHOD FUNCTION EOF END CLASS ]
## Transitions:
-- On TYP_VOID shift to state 3
-- On TYP_INT shift to state 4
-- On TYP_BOOL shift to state 5
-- On LBRACKET shift to state 6
-- On IDENT shift to state 7
-- On typed_ident shift to state 18
-- On typ shift to state 12
-- On separated_nonempty_list(COMMA,typed_ident) shift to state 21
-- On loption(separated_nonempty_list(COMMA,typed_ident)) shift to state 22
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,typed_ident)) ->

State 18:
## Known stack suffix:
## typed_ident
## LR(1) items:
separated_nonempty_list(COMMA,typed_ident) -> typed_ident . [ RPAR ]
separated_nonempty_list(COMMA,typed_ident) -> typed_ident . COMMA separated_nonempty_list(COMMA,typed_ident) [ RPAR ]
## Transitions:
-- On COMMA shift to state 19
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,typed_ident) -> typed_ident

State 19:
## Known stack suffix:
## typed_ident COMMA
## LR(1) items:
separated_nonempty_list(COMMA,typed_ident) -> typed_ident COMMA . separated_nonempty_list(COMMA,typed_ident) [ RPAR ]
## Transitions:
-- On TYP_VOID shift to state 3
-- On TYP_INT shift to state 4
-- On TYP_BOOL shift to state 5
-- On LBRACKET shift to state 6
-- On IDENT shift to state 7
-- On typed_ident shift to state 18
-- On typ shift to state 12
-- On separated_nonempty_list(COMMA,typed_ident) shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## typed_ident COMMA separated_nonempty_list(COMMA,typed_ident)
## LR(1) items:
separated_nonempty_list(COMMA,typed_ident) -> typed_ident COMMA separated_nonempty_list(COMMA,typed_ident) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,typed_ident) -> typed_ident COMMA separated_nonempty_list(COMMA,typed_ident)

State 21:
## Known stack suffix:
## separated_nonempty_list(COMMA,typed_ident)
## LR(1) items:
loption(separated_nonempty_list(COMMA,typed_ident)) -> separated_nonempty_list(COMMA,typed_ident) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,typed_ident)) -> separated_nonempty_list(COMMA,typed_ident)

State 22:
## Known stack suffix:
## typ IDENT LPAR loption(separated_nonempty_list(COMMA,typed_ident))
## LR(1) items:
fun_def -> typ IDENT LPAR loption(separated_nonempty_list(COMMA,typed_ident)) . RPAR BEGIN list(variable_decl) list(instruction) END [ VAR METHOD FUNCTION EOF END CLASS ]
## Transitions:
-- On RPAR shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## typ IDENT LPAR loption(separated_nonempty_list(COMMA,typed_ident)) RPAR
## LR(1) items:
fun_def -> typ IDENT LPAR loption(separated_nonempty_list(COMMA,typed_ident)) RPAR . BEGIN list(variable_decl) list(instruction) END [ VAR METHOD FUNCTION EOF END CLASS ]
## Transitions:
-- On BEGIN shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## typ IDENT LPAR loption(separated_nonempty_list(COMMA,typed_ident)) RPAR BEGIN
## LR(1) items:
fun_def -> typ IDENT LPAR loption(separated_nonempty_list(COMMA,typed_ident)) RPAR BEGIN . list(variable_decl) list(instruction) END [ VAR METHOD FUNCTION EOF END CLASS ]
## Transitions:
-- On VAR shift to state 2
-- On variable_decl shift to state 25
-- On list(variable_decl) shift to state 27
## Reductions:
-- On WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL
--   reduce production list(variable_decl) ->

State 25:
## Known stack suffix:
## variable_decl
## LR(1) items:
list(variable_decl) -> variable_decl . list(variable_decl) [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On VAR shift to state 2
-- On variable_decl shift to state 25
-- On list(variable_decl) shift to state 26
## Reductions:
-- On WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL
--   reduce production list(variable_decl) ->

State 26:
## Known stack suffix:
## variable_decl list(variable_decl)
## LR(1) items:
list(variable_decl) -> variable_decl list(variable_decl) . [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
## Reductions:
-- On WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL
--   reduce production list(variable_decl) -> variable_decl list(variable_decl)

State 27:
## Known stack suffix:
## typ IDENT LPAR loption(separated_nonempty_list(COMMA,typed_ident)) RPAR BEGIN list(variable_decl)
## LR(1) items:
fun_def -> typ IDENT LPAR loption(separated_nonempty_list(COMMA,typed_ident)) RPAR BEGIN list(variable_decl) . list(instruction) END [ VAR METHOD FUNCTION EOF END CLASS ]
## Transitions:
-- On WHILE shift to state 28
-- On THIS shift to state 30
-- On RETURN shift to state 72
-- On PUTCHAR shift to state 75
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IF shift to state 80
-- On IDENT shift to state 85
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On mem_access shift to state 89
-- On list(instruction) shift to state 105
-- On instruction shift to state 99
-- On expression shift to state 101
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 28:
## Known stack suffix:
## WHILE
## LR(1) items:
instruction -> WHILE . LPAR expression RPAR BEGIN list(instruction) END [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On LPAR shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## WHILE LPAR
## LR(1) items:
instruction -> WHILE LPAR . expression RPAR BEGIN list(instruction) END [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On THIS shift to state 30
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IDENT shift to state 36
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On mem_access shift to state 41
-- On expression shift to state 69
## Reductions:

State 30:
## Known stack suffix:
## THIS
## LR(1) items:
expression -> THIS . [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA
--   reduce production expression -> THIS

State 31:
## Known stack suffix:
## NEW
## LR(1) items:
expression -> NEW . IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
expression -> NEW . LBRACKET typ COMMA expression RBRACKET [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On LBRACKET shift to state 32
-- On IDENT shift to state 65
## Reductions:

State 32:
## Known stack suffix:
## NEW LBRACKET
## LR(1) items:
expression -> NEW LBRACKET . typ COMMA expression RBRACKET [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On TYP_VOID shift to state 3
-- On TYP_INT shift to state 4
-- On TYP_BOOL shift to state 5
-- On LBRACKET shift to state 6
-- On IDENT shift to state 7
-- On typ shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## NEW LBRACKET typ
## LR(1) items:
expression -> NEW LBRACKET typ . COMMA expression RBRACKET [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On COMMA shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## NEW LBRACKET typ COMMA
## LR(1) items:
expression -> NEW LBRACKET typ COMMA . expression RBRACKET [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On THIS shift to state 30
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IDENT shift to state 36
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On mem_access shift to state 41
-- On expression shift to state 63
## Reductions:

State 35:
## Known stack suffix:
## LPAR
## LR(1) items:
expression -> LPAR . expression RPAR [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On THIS shift to state 30
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IDENT shift to state 36
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On mem_access shift to state 41
-- On expression shift to state 61
## Reductions:

State 36:
## Known stack suffix:
## IDENT
## LR(1) items:
expression -> IDENT . [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
expression -> IDENT . LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On LPAR shift to state 37
## Reductions:
-- On STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA
--   reduce production expression -> IDENT

State 37:
## Known stack suffix:
## IDENT LPAR
## LR(1) items:
expression -> IDENT LPAR . loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On THIS shift to state 30
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IDENT shift to state 36
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On separated_nonempty_list(COMMA,expression) shift to state 40
-- On mem_access shift to state 41
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 42
-- On expression shift to state 44
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,expression)) ->

State 38:
## Known stack suffix:
## CST
## LR(1) items:
expression -> CST . [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA
--   reduce production expression -> CST

State 39:
## Known stack suffix:
## BOOL
## LR(1) items:
expression -> BOOL . [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA
--   reduce production expression -> BOOL

State 40:
## Known stack suffix:
## separated_nonempty_list(COMMA,expression)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression)

State 41:
## Known stack suffix:
## mem_access
## LR(1) items:
expression -> mem_access . [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA
--   reduce production expression -> mem_access

State 42:
## Known stack suffix:
## IDENT LPAR loption(separated_nonempty_list(COMMA,expression))
## LR(1) items:
expression -> IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) . RPAR [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On RPAR shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR
## LR(1) items:
expression -> IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR . [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA
--   reduce production expression -> IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR

State 44:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR RPAR PLUS LT LBRACKET DOT COMMA ]
expression -> expression . STAR expression [ STAR RPAR PLUS LT LBRACKET DOT COMMA ]
expression -> expression . LT expression [ STAR RPAR PLUS LT LBRACKET DOT COMMA ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR RPAR PLUS LT LBRACKET DOT COMMA ]
mem_access -> expression . LBRACKET expression RBRACKET [ STAR RPAR PLUS LT LBRACKET DOT COMMA ]
mem_access -> expression . DOT IDENT [ STAR RPAR PLUS LT LBRACKET DOT COMMA ]
separated_nonempty_list(COMMA,expression) -> expression . [ RPAR ]
separated_nonempty_list(COMMA,expression) -> expression . COMMA separated_nonempty_list(COMMA,expression) [ RPAR ]
## Transitions:
-- On STAR shift to state 45
-- On PLUS shift to state 50
-- On LT shift to state 57
-- On LBRACKET shift to state 47
-- On DOT shift to state 52
-- On COMMA shift to state 59
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,expression) -> expression

State 45:
## Known stack suffix:
## expression STAR
## LR(1) items:
expression -> expression STAR . expression [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On THIS shift to state 30
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IDENT shift to state 36
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On mem_access shift to state 41
-- On expression shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## expression STAR expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
expression -> expression . STAR expression [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
expression -> expression STAR expression . [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
expression -> expression . LT expression [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
mem_access -> expression . LBRACKET expression RBRACKET [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
mem_access -> expression . DOT IDENT [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On LBRACKET shift to state 47
-- On DOT shift to state 52
## Reductions:
-- On STAR SEMI RPAR RBRACKET PLUS LT COMMA
--   reduce production expression -> expression STAR expression

State 47:
## Known stack suffix:
## expression LBRACKET
## LR(1) items:
mem_access -> expression LBRACKET . expression RBRACKET [ STAR SET SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On THIS shift to state 30
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IDENT shift to state 36
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On mem_access shift to state 41
-- On expression shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## expression LBRACKET expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR RBRACKET PLUS LT LBRACKET DOT ]
expression -> expression . STAR expression [ STAR RBRACKET PLUS LT LBRACKET DOT ]
expression -> expression . LT expression [ STAR RBRACKET PLUS LT LBRACKET DOT ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR RBRACKET PLUS LT LBRACKET DOT ]
mem_access -> expression . LBRACKET expression RBRACKET [ STAR RBRACKET PLUS LT LBRACKET DOT ]
mem_access -> expression LBRACKET expression . RBRACKET [ STAR SET SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
mem_access -> expression . DOT IDENT [ STAR RBRACKET PLUS LT LBRACKET DOT ]
## Transitions:
-- On STAR shift to state 45
-- On RBRACKET shift to state 49
-- On PLUS shift to state 50
-- On LT shift to state 57
-- On LBRACKET shift to state 47
-- On DOT shift to state 52
## Reductions:

State 49:
## Known stack suffix:
## expression LBRACKET expression RBRACKET
## LR(1) items:
mem_access -> expression LBRACKET expression RBRACKET . [ STAR SET SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
## Reductions:
-- On STAR SET SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA
--   reduce production mem_access -> expression LBRACKET expression RBRACKET

State 50:
## Known stack suffix:
## expression PLUS
## LR(1) items:
expression -> expression PLUS . expression [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On THIS shift to state 30
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IDENT shift to state 36
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On mem_access shift to state 41
-- On expression shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## expression PLUS expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
expression -> expression PLUS expression . [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
expression -> expression . STAR expression [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
expression -> expression . LT expression [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
mem_access -> expression . LBRACKET expression RBRACKET [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
mem_access -> expression . DOT IDENT [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On STAR shift to state 45
-- On LBRACKET shift to state 47
-- On DOT shift to state 52
## Reductions:
-- On SEMI RPAR RBRACKET PLUS LT COMMA
--   reduce production expression -> expression PLUS expression

State 52:
## Known stack suffix:
## expression DOT
## LR(1) items:
expression -> expression DOT . IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
mem_access -> expression DOT . IDENT [ STAR SET SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On IDENT shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## expression DOT IDENT
## LR(1) items:
expression -> expression DOT IDENT . LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
mem_access -> expression DOT IDENT . [ STAR SET SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On LPAR shift to state 54
## Reductions:
-- On STAR SET SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA
--   reduce production mem_access -> expression DOT IDENT

State 54:
## Known stack suffix:
## expression DOT IDENT LPAR
## LR(1) items:
expression -> expression DOT IDENT LPAR . loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On THIS shift to state 30
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IDENT shift to state 36
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On separated_nonempty_list(COMMA,expression) shift to state 40
-- On mem_access shift to state 41
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 55
-- On expression shift to state 44
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,expression)) ->

State 55:
## Known stack suffix:
## expression DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression))
## LR(1) items:
expression -> expression DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) . RPAR [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On RPAR shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## expression DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR
## LR(1) items:
expression -> expression DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR . [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA
--   reduce production expression -> expression DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR

State 57:
## Known stack suffix:
## expression LT
## LR(1) items:
expression -> expression LT . expression [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On THIS shift to state 30
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IDENT shift to state 36
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On mem_access shift to state 41
-- On expression shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## expression LT expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
expression -> expression . STAR expression [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
expression -> expression . LT expression [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
expression -> expression LT expression . [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
mem_access -> expression . LBRACKET expression RBRACKET [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
mem_access -> expression . DOT IDENT [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On STAR shift to state 45
-- On PLUS shift to state 50
-- On LBRACKET shift to state 47
-- On DOT shift to state 52
## Reductions:
-- On SEMI RPAR RBRACKET LT COMMA
--   reduce production expression -> expression LT expression

State 59:
## Known stack suffix:
## expression COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA . separated_nonempty_list(COMMA,expression) [ RPAR ]
## Transitions:
-- On THIS shift to state 30
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IDENT shift to state 36
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On separated_nonempty_list(COMMA,expression) shift to state 60
-- On mem_access shift to state 41
-- On expression shift to state 44
## Reductions:

State 60:
## Known stack suffix:
## expression COMMA separated_nonempty_list(COMMA,expression)
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression)

State 61:
## Known stack suffix:
## LPAR expression
## LR(1) items:
expression -> LPAR expression . RPAR [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
expression -> expression . PLUS expression [ STAR RPAR PLUS LT LBRACKET DOT ]
expression -> expression . STAR expression [ STAR RPAR PLUS LT LBRACKET DOT ]
expression -> expression . LT expression [ STAR RPAR PLUS LT LBRACKET DOT ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR RPAR PLUS LT LBRACKET DOT ]
mem_access -> expression . LBRACKET expression RBRACKET [ STAR RPAR PLUS LT LBRACKET DOT ]
mem_access -> expression . DOT IDENT [ STAR RPAR PLUS LT LBRACKET DOT ]
## Transitions:
-- On STAR shift to state 45
-- On RPAR shift to state 62
-- On PLUS shift to state 50
-- On LT shift to state 57
-- On LBRACKET shift to state 47
-- On DOT shift to state 52
## Reductions:

State 62:
## Known stack suffix:
## LPAR expression RPAR
## LR(1) items:
expression -> LPAR expression RPAR . [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA
--   reduce production expression -> LPAR expression RPAR

State 63:
## Known stack suffix:
## NEW LBRACKET typ COMMA expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR RBRACKET PLUS LT LBRACKET DOT ]
expression -> expression . STAR expression [ STAR RBRACKET PLUS LT LBRACKET DOT ]
expression -> expression . LT expression [ STAR RBRACKET PLUS LT LBRACKET DOT ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR RBRACKET PLUS LT LBRACKET DOT ]
expression -> NEW LBRACKET typ COMMA expression . RBRACKET [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
mem_access -> expression . LBRACKET expression RBRACKET [ STAR RBRACKET PLUS LT LBRACKET DOT ]
mem_access -> expression . DOT IDENT [ STAR RBRACKET PLUS LT LBRACKET DOT ]
## Transitions:
-- On STAR shift to state 45
-- On RBRACKET shift to state 64
-- On PLUS shift to state 50
-- On LT shift to state 57
-- On LBRACKET shift to state 47
-- On DOT shift to state 52
## Reductions:

State 64:
## Known stack suffix:
## NEW LBRACKET typ COMMA expression RBRACKET
## LR(1) items:
expression -> NEW LBRACKET typ COMMA expression RBRACKET . [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA
--   reduce production expression -> NEW LBRACKET typ COMMA expression RBRACKET

State 65:
## Known stack suffix:
## NEW IDENT
## LR(1) items:
expression -> NEW IDENT . LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On LPAR shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## NEW IDENT LPAR
## LR(1) items:
expression -> NEW IDENT LPAR . loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On THIS shift to state 30
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IDENT shift to state 36
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On separated_nonempty_list(COMMA,expression) shift to state 40
-- On mem_access shift to state 41
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 67
-- On expression shift to state 44
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,expression)) ->

State 67:
## Known stack suffix:
## NEW IDENT LPAR loption(separated_nonempty_list(COMMA,expression))
## LR(1) items:
expression -> NEW IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) . RPAR [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
-- On RPAR shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## NEW IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR
## LR(1) items:
expression -> NEW IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR . [ STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA ]
## Transitions:
## Reductions:
-- On STAR SEMI RPAR RBRACKET PLUS LT LBRACKET DOT COMMA
--   reduce production expression -> NEW IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR

State 69:
## Known stack suffix:
## WHILE LPAR expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR RPAR PLUS LT LBRACKET DOT ]
expression -> expression . STAR expression [ STAR RPAR PLUS LT LBRACKET DOT ]
expression -> expression . LT expression [ STAR RPAR PLUS LT LBRACKET DOT ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR RPAR PLUS LT LBRACKET DOT ]
instruction -> WHILE LPAR expression . RPAR BEGIN list(instruction) END [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
mem_access -> expression . LBRACKET expression RBRACKET [ STAR RPAR PLUS LT LBRACKET DOT ]
mem_access -> expression . DOT IDENT [ STAR RPAR PLUS LT LBRACKET DOT ]
## Transitions:
-- On STAR shift to state 45
-- On RPAR shift to state 70
-- On PLUS shift to state 50
-- On LT shift to state 57
-- On LBRACKET shift to state 47
-- On DOT shift to state 52
## Reductions:

State 70:
## Known stack suffix:
## WHILE LPAR expression RPAR
## LR(1) items:
instruction -> WHILE LPAR expression RPAR . BEGIN list(instruction) END [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On BEGIN shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN . list(instruction) END [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On WHILE shift to state 28
-- On THIS shift to state 30
-- On RETURN shift to state 72
-- On PUTCHAR shift to state 75
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IF shift to state 80
-- On IDENT shift to state 85
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On mem_access shift to state 89
-- On list(instruction) shift to state 103
-- On instruction shift to state 99
-- On expression shift to state 101
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 72:
## Known stack suffix:
## RETURN
## LR(1) items:
instruction -> RETURN . expression SEMI [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On THIS shift to state 30
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IDENT shift to state 36
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On mem_access shift to state 41
-- On expression shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## RETURN expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SEMI PLUS LT LBRACKET DOT ]
expression -> expression . STAR expression [ STAR SEMI PLUS LT LBRACKET DOT ]
expression -> expression . LT expression [ STAR SEMI PLUS LT LBRACKET DOT ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI PLUS LT LBRACKET DOT ]
instruction -> RETURN expression . SEMI [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
mem_access -> expression . LBRACKET expression RBRACKET [ STAR SEMI PLUS LT LBRACKET DOT ]
mem_access -> expression . DOT IDENT [ STAR SEMI PLUS LT LBRACKET DOT ]
## Transitions:
-- On STAR shift to state 45
-- On SEMI shift to state 74
-- On PLUS shift to state 50
-- On LT shift to state 57
-- On LBRACKET shift to state 47
-- On DOT shift to state 52
## Reductions:

State 74:
## Known stack suffix:
## RETURN expression SEMI
## LR(1) items:
instruction -> RETURN expression SEMI . [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
## Reductions:
-- On WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL
--   reduce production instruction -> RETURN expression SEMI

State 75:
## Known stack suffix:
## PUTCHAR
## LR(1) items:
instruction -> PUTCHAR . LPAR expression RPAR SEMI [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On LPAR shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## PUTCHAR LPAR
## LR(1) items:
instruction -> PUTCHAR LPAR . expression RPAR SEMI [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On THIS shift to state 30
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IDENT shift to state 36
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On mem_access shift to state 41
-- On expression shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## PUTCHAR LPAR expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR RPAR PLUS LT LBRACKET DOT ]
expression -> expression . STAR expression [ STAR RPAR PLUS LT LBRACKET DOT ]
expression -> expression . LT expression [ STAR RPAR PLUS LT LBRACKET DOT ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR RPAR PLUS LT LBRACKET DOT ]
instruction -> PUTCHAR LPAR expression . RPAR SEMI [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
mem_access -> expression . LBRACKET expression RBRACKET [ STAR RPAR PLUS LT LBRACKET DOT ]
mem_access -> expression . DOT IDENT [ STAR RPAR PLUS LT LBRACKET DOT ]
## Transitions:
-- On STAR shift to state 45
-- On RPAR shift to state 78
-- On PLUS shift to state 50
-- On LT shift to state 57
-- On LBRACKET shift to state 47
-- On DOT shift to state 52
## Reductions:

State 78:
## Known stack suffix:
## PUTCHAR LPAR expression RPAR
## LR(1) items:
instruction -> PUTCHAR LPAR expression RPAR . SEMI [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On SEMI shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## PUTCHAR LPAR expression RPAR SEMI
## LR(1) items:
instruction -> PUTCHAR LPAR expression RPAR SEMI . [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
## Reductions:
-- On WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL
--   reduce production instruction -> PUTCHAR LPAR expression RPAR SEMI

State 80:
## Known stack suffix:
## IF
## LR(1) items:
instruction -> IF . LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On LPAR shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## IF LPAR
## LR(1) items:
instruction -> IF LPAR . expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On THIS shift to state 30
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IDENT shift to state 36
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On mem_access shift to state 41
-- On expression shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## IF LPAR expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR RPAR PLUS LT LBRACKET DOT ]
expression -> expression . STAR expression [ STAR RPAR PLUS LT LBRACKET DOT ]
expression -> expression . LT expression [ STAR RPAR PLUS LT LBRACKET DOT ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR RPAR PLUS LT LBRACKET DOT ]
instruction -> IF LPAR expression . RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
mem_access -> expression . LBRACKET expression RBRACKET [ STAR RPAR PLUS LT LBRACKET DOT ]
mem_access -> expression . DOT IDENT [ STAR RPAR PLUS LT LBRACKET DOT ]
## Transitions:
-- On STAR shift to state 45
-- On RPAR shift to state 83
-- On PLUS shift to state 50
-- On LT shift to state 57
-- On LBRACKET shift to state 47
-- On DOT shift to state 52
## Reductions:

State 83:
## Known stack suffix:
## IF LPAR expression RPAR
## LR(1) items:
instruction -> IF LPAR expression RPAR . BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On BEGIN shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN . list(instruction) END ELSE BEGIN list(instruction) END [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On WHILE shift to state 28
-- On THIS shift to state 30
-- On RETURN shift to state 72
-- On PUTCHAR shift to state 75
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IF shift to state 80
-- On IDENT shift to state 85
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On mem_access shift to state 89
-- On list(instruction) shift to state 93
-- On instruction shift to state 99
-- On expression shift to state 101
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 85:
## Known stack suffix:
## IDENT
## LR(1) items:
expression -> IDENT . [ STAR SEMI PLUS LT LBRACKET DOT ]
expression -> IDENT . LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI PLUS LT LBRACKET DOT ]
instruction -> IDENT . SET expression SEMI [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On SET shift to state 86
-- On LPAR shift to state 37
## Reductions:
-- On STAR SEMI PLUS LT LBRACKET DOT
--   reduce production expression -> IDENT

State 86:
## Known stack suffix:
## IDENT SET
## LR(1) items:
instruction -> IDENT SET . expression SEMI [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On THIS shift to state 30
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IDENT shift to state 36
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On mem_access shift to state 41
-- On expression shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## IDENT SET expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SEMI PLUS LT LBRACKET DOT ]
expression -> expression . STAR expression [ STAR SEMI PLUS LT LBRACKET DOT ]
expression -> expression . LT expression [ STAR SEMI PLUS LT LBRACKET DOT ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI PLUS LT LBRACKET DOT ]
instruction -> IDENT SET expression . SEMI [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
mem_access -> expression . LBRACKET expression RBRACKET [ STAR SEMI PLUS LT LBRACKET DOT ]
mem_access -> expression . DOT IDENT [ STAR SEMI PLUS LT LBRACKET DOT ]
## Transitions:
-- On STAR shift to state 45
-- On SEMI shift to state 88
-- On PLUS shift to state 50
-- On LT shift to state 57
-- On LBRACKET shift to state 47
-- On DOT shift to state 52
## Reductions:

State 88:
## Known stack suffix:
## IDENT SET expression SEMI
## LR(1) items:
instruction -> IDENT SET expression SEMI . [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
## Reductions:
-- On WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL
--   reduce production instruction -> IDENT SET expression SEMI

State 89:
## Known stack suffix:
## mem_access
## LR(1) items:
expression -> mem_access . [ STAR SEMI PLUS LT LBRACKET DOT ]
instruction -> mem_access . SET expression SEMI [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On SET shift to state 90
## Reductions:
-- On STAR SEMI PLUS LT LBRACKET DOT
--   reduce production expression -> mem_access

State 90:
## Known stack suffix:
## mem_access SET
## LR(1) items:
instruction -> mem_access SET . expression SEMI [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On THIS shift to state 30
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IDENT shift to state 36
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On mem_access shift to state 41
-- On expression shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## mem_access SET expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SEMI PLUS LT LBRACKET DOT ]
expression -> expression . STAR expression [ STAR SEMI PLUS LT LBRACKET DOT ]
expression -> expression . LT expression [ STAR SEMI PLUS LT LBRACKET DOT ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI PLUS LT LBRACKET DOT ]
instruction -> mem_access SET expression . SEMI [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
mem_access -> expression . LBRACKET expression RBRACKET [ STAR SEMI PLUS LT LBRACKET DOT ]
mem_access -> expression . DOT IDENT [ STAR SEMI PLUS LT LBRACKET DOT ]
## Transitions:
-- On STAR shift to state 45
-- On SEMI shift to state 92
-- On PLUS shift to state 50
-- On LT shift to state 57
-- On LBRACKET shift to state 47
-- On DOT shift to state 52
## Reductions:

State 92:
## Known stack suffix:
## mem_access SET expression SEMI
## LR(1) items:
instruction -> mem_access SET expression SEMI . [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
## Reductions:
-- On WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL
--   reduce production instruction -> mem_access SET expression SEMI

State 93:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction)
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) . END ELSE BEGIN list(instruction) END [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On END shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END . ELSE BEGIN list(instruction) END [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On ELSE shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE . BEGIN list(instruction) END [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On BEGIN shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN . list(instruction) END [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On WHILE shift to state 28
-- On THIS shift to state 30
-- On RETURN shift to state 72
-- On PUTCHAR shift to state 75
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IF shift to state 80
-- On IDENT shift to state 85
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On mem_access shift to state 89
-- On list(instruction) shift to state 97
-- On instruction shift to state 99
-- On expression shift to state 101
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 97:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction)
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) . END [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On END shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END . [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
## Reductions:
-- On WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL
--   reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END

State 99:
## Known stack suffix:
## instruction
## LR(1) items:
list(instruction) -> instruction . list(instruction) [ END ]
## Transitions:
-- On WHILE shift to state 28
-- On THIS shift to state 30
-- On RETURN shift to state 72
-- On PUTCHAR shift to state 75
-- On NEW shift to state 31
-- On LPAR shift to state 35
-- On IF shift to state 80
-- On IDENT shift to state 85
-- On CST shift to state 38
-- On BOOL shift to state 39
-- On mem_access shift to state 89
-- On list(instruction) shift to state 100
-- On instruction shift to state 99
-- On expression shift to state 101
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 100:
## Known stack suffix:
## instruction list(instruction)
## LR(1) items:
list(instruction) -> instruction list(instruction) . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production list(instruction) -> instruction list(instruction)

State 101:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . PLUS expression [ STAR SEMI PLUS LT LBRACKET DOT ]
expression -> expression . STAR expression [ STAR SEMI PLUS LT LBRACKET DOT ]
expression -> expression . LT expression [ STAR SEMI PLUS LT LBRACKET DOT ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SEMI PLUS LT LBRACKET DOT ]
instruction -> expression . SEMI [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
mem_access -> expression . LBRACKET expression RBRACKET [ STAR SET SEMI PLUS LT LBRACKET DOT ]
mem_access -> expression . DOT IDENT [ STAR SET SEMI PLUS LT LBRACKET DOT ]
## Transitions:
-- On STAR shift to state 45
-- On SEMI shift to state 102
-- On PLUS shift to state 50
-- On LT shift to state 57
-- On LBRACKET shift to state 47
-- On DOT shift to state 52
## Reductions:

State 102:
## Known stack suffix:
## expression SEMI
## LR(1) items:
instruction -> expression SEMI . [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
## Reductions:
-- On WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL
--   reduce production instruction -> expression SEMI

State 103:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN list(instruction)
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) . END [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
-- On END shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN list(instruction) END
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END . [ WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL ]
## Transitions:
## Reductions:
-- On WHILE THIS RETURN PUTCHAR NEW LPAR IF IDENT END CST BOOL
--   reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END

State 105:
## Known stack suffix:
## typ IDENT LPAR loption(separated_nonempty_list(COMMA,typed_ident)) RPAR BEGIN list(variable_decl) list(instruction)
## LR(1) items:
fun_def -> typ IDENT LPAR loption(separated_nonempty_list(COMMA,typed_ident)) RPAR BEGIN list(variable_decl) list(instruction) . END [ VAR METHOD FUNCTION EOF END CLASS ]
## Transitions:
-- On END shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## typ IDENT LPAR loption(separated_nonempty_list(COMMA,typed_ident)) RPAR BEGIN list(variable_decl) list(instruction) END
## LR(1) items:
fun_def -> typ IDENT LPAR loption(separated_nonempty_list(COMMA,typed_ident)) RPAR BEGIN list(variable_decl) list(instruction) END . [ VAR METHOD FUNCTION EOF END CLASS ]
## Transitions:
## Reductions:
-- On VAR METHOD FUNCTION EOF END CLASS
--   reduce production fun_def -> typ IDENT LPAR loption(separated_nonempty_list(COMMA,typed_ident)) RPAR BEGIN list(variable_decl) list(instruction) END

State 107:
## Known stack suffix:
## FUNCTION fun_def
## LR(1) items:
function_def -> FUNCTION fun_def . [ VAR FUNCTION EOF CLASS ]
## Transitions:
## Reductions:
-- On VAR FUNCTION EOF CLASS
--   reduce production function_def -> FUNCTION fun_def

State 108:
## Known stack suffix:
## CLASS
## LR(1) items:
class_def -> CLASS . IDENT option(__anonymous_0) BEGIN list(attribute_decl) list(method_def) END [ VAR FUNCTION EOF CLASS ]
## Transitions:
-- On IDENT shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## CLASS IDENT
## LR(1) items:
class_def -> CLASS IDENT . option(__anonymous_0) BEGIN list(attribute_decl) list(method_def) END [ VAR FUNCTION EOF CLASS ]
## Transitions:
-- On EXTENDS shift to state 110
-- On option(__anonymous_0) shift to state 112
## Reductions:
-- On BEGIN
--   reduce production option(__anonymous_0) ->

State 110:
## Known stack suffix:
## EXTENDS
## LR(1) items:
option(__anonymous_0) -> EXTENDS . IDENT [ BEGIN ]
## Transitions:
-- On IDENT shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## EXTENDS IDENT
## LR(1) items:
option(__anonymous_0) -> EXTENDS IDENT . [ BEGIN ]
## Transitions:
## Reductions:
-- On BEGIN
--   reduce production option(__anonymous_0) -> EXTENDS IDENT

State 112:
## Known stack suffix:
## CLASS IDENT option(__anonymous_0)
## LR(1) items:
class_def -> CLASS IDENT option(__anonymous_0) . BEGIN list(attribute_decl) list(method_def) END [ VAR FUNCTION EOF CLASS ]
## Transitions:
-- On BEGIN shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## CLASS IDENT option(__anonymous_0) BEGIN
## LR(1) items:
class_def -> CLASS IDENT option(__anonymous_0) BEGIN . list(attribute_decl) list(method_def) END [ VAR FUNCTION EOF CLASS ]
## Transitions:
-- On ATTRIBUTE shift to state 114
-- On list(attribute_decl) shift to state 117
-- On attribute_decl shift to state 124
## Reductions:
-- On METHOD END
--   reduce production list(attribute_decl) ->

State 114:
## Known stack suffix:
## ATTRIBUTE
## LR(1) items:
attribute_decl -> ATTRIBUTE . typed_ident SEMI [ METHOD END ATTRIBUTE ]
## Transitions:
-- On TYP_VOID shift to state 3
-- On TYP_INT shift to state 4
-- On TYP_BOOL shift to state 5
-- On LBRACKET shift to state 6
-- On IDENT shift to state 7
-- On typed_ident shift to state 115
-- On typ shift to state 12
## Reductions:

State 115:
## Known stack suffix:
## ATTRIBUTE typed_ident
## LR(1) items:
attribute_decl -> ATTRIBUTE typed_ident . SEMI [ METHOD END ATTRIBUTE ]
## Transitions:
-- On SEMI shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## ATTRIBUTE typed_ident SEMI
## LR(1) items:
attribute_decl -> ATTRIBUTE typed_ident SEMI . [ METHOD END ATTRIBUTE ]
## Transitions:
## Reductions:
-- On METHOD END ATTRIBUTE
--   reduce production attribute_decl -> ATTRIBUTE typed_ident SEMI

State 117:
## Known stack suffix:
## CLASS IDENT option(__anonymous_0) BEGIN list(attribute_decl)
## LR(1) items:
class_def -> CLASS IDENT option(__anonymous_0) BEGIN list(attribute_decl) . list(method_def) END [ VAR FUNCTION EOF CLASS ]
## Transitions:
-- On METHOD shift to state 118
-- On method_def shift to state 120
-- On list(method_def) shift to state 122
## Reductions:
-- On END
--   reduce production list(method_def) ->

State 118:
## Known stack suffix:
## METHOD
## LR(1) items:
method_def -> METHOD . fun_def [ METHOD END ]
## Transitions:
-- On TYP_VOID shift to state 3
-- On TYP_INT shift to state 4
-- On TYP_BOOL shift to state 5
-- On LBRACKET shift to state 6
-- On IDENT shift to state 7
-- On typ shift to state 15
-- On fun_def shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## METHOD fun_def
## LR(1) items:
method_def -> METHOD fun_def . [ METHOD END ]
## Transitions:
## Reductions:
-- On METHOD END
--   reduce production method_def -> METHOD fun_def

State 120:
## Known stack suffix:
## method_def
## LR(1) items:
list(method_def) -> method_def . list(method_def) [ END ]
## Transitions:
-- On METHOD shift to state 118
-- On method_def shift to state 120
-- On list(method_def) shift to state 121
## Reductions:
-- On END
--   reduce production list(method_def) ->

State 121:
## Known stack suffix:
## method_def list(method_def)
## LR(1) items:
list(method_def) -> method_def list(method_def) . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production list(method_def) -> method_def list(method_def)

State 122:
## Known stack suffix:
## CLASS IDENT option(__anonymous_0) BEGIN list(attribute_decl) list(method_def)
## LR(1) items:
class_def -> CLASS IDENT option(__anonymous_0) BEGIN list(attribute_decl) list(method_def) . END [ VAR FUNCTION EOF CLASS ]
## Transitions:
-- On END shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## CLASS IDENT option(__anonymous_0) BEGIN list(attribute_decl) list(method_def) END
## LR(1) items:
class_def -> CLASS IDENT option(__anonymous_0) BEGIN list(attribute_decl) list(method_def) END . [ VAR FUNCTION EOF CLASS ]
## Transitions:
## Reductions:
-- On VAR FUNCTION EOF CLASS
--   reduce production class_def -> CLASS IDENT option(__anonymous_0) BEGIN list(attribute_decl) list(method_def) END

State 124:
## Known stack suffix:
## attribute_decl
## LR(1) items:
list(attribute_decl) -> attribute_decl . list(attribute_decl) [ METHOD END ]
## Transitions:
-- On ATTRIBUTE shift to state 114
-- On list(attribute_decl) shift to state 125
-- On attribute_decl shift to state 124
## Reductions:
-- On METHOD END
--   reduce production list(attribute_decl) ->

State 125:
## Known stack suffix:
## attribute_decl list(attribute_decl)
## LR(1) items:
list(attribute_decl) -> attribute_decl list(attribute_decl) . [ METHOD END ]
## Transitions:
## Reductions:
-- On METHOD END
--   reduce production list(attribute_decl) -> attribute_decl list(attribute_decl)

State 126:
## Known stack suffix:
## variable_decl
## LR(1) items:
decl -> variable_decl . [ VAR FUNCTION EOF CLASS ]
## Transitions:
## Reductions:
-- On VAR FUNCTION EOF CLASS
--   reduce production decl -> variable_decl

State 127:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

State 128:
## Known stack suffix:
## list(decl)
## LR(1) items:
program -> list(decl) . EOF [ # ]
## Transitions:
-- On EOF shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## list(decl) EOF
## LR(1) items:
program -> list(decl) EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> list(decl) EOF

State 130:
## Known stack suffix:
## function_def
## LR(1) items:
decl -> function_def . [ VAR FUNCTION EOF CLASS ]
## Transitions:
## Reductions:
-- On VAR FUNCTION EOF CLASS
--   reduce production decl -> function_def

State 131:
## Known stack suffix:
## decl
## LR(1) items:
list(decl) -> decl . list(decl) [ EOF ]
## Transitions:
-- On VAR shift to state 2
-- On FUNCTION shift to state 14
-- On CLASS shift to state 108
-- On variable_decl shift to state 126
-- On list(decl) shift to state 132
-- On function_def shift to state 130
-- On decl shift to state 131
-- On class_def shift to state 133
## Reductions:
-- On EOF
--   reduce production list(decl) ->

State 132:
## Known stack suffix:
## decl list(decl)
## LR(1) items:
list(decl) -> decl list(decl) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production list(decl) -> decl list(decl)

State 133:
## Known stack suffix:
## class_def
## LR(1) items:
decl -> class_def . [ VAR FUNCTION EOF CLASS ]
## Transitions:
## Reductions:
-- On VAR FUNCTION EOF CLASS
--   reduce production decl -> class_def

